import { writeFile } from "node:fs/promises";
import {
  gzipSync,
  gunzipSync,
  brotliCompressSync,
  brotliDecompressSync,
  constants,
} from "node:zlib";

// Execute
init("https://www.quince.com/page-data/all/new-arrivals/page-data.json");

// Functions

async function init(url) {
  const res = await fetch(url);
  const text = await res.text();
  const contentBuffer = Buffer.from(text);

  const results = [];

  for (let level = 1; level <= 9; level += 1) {
    results.push(compressionAndDeCompressionTest(contentBuffer, level, "gzip"));
  }
  for (let level = 1; level <= 11; level += 1) {
    results.push(compressionAndDeCompressionTest(contentBuffer, level, "br"));
  }

  await writeFile(
    "./src/data.ts",
    ` // This is autogenerated content
    export const gzipData = ${JSON.stringify(results.slice(0, 9), null, 2)}\n
    export const brData = ${JSON.stringify(results.slice(9), null, 2)}\n
    `,
    "utf-8"
  );
}

/**
 *
 * @param {Buffer} contentBuffer
 * @param {number} level
 * @param {"gzip" | "br"} type
 */
function compressionAndDeCompressionTest(contentBuffer, level, type) {
  const { time: compressionTime, result: compressedContent } = timedExecution(
    () => compress(contentBuffer, type, level)
  );
  const { time: decompressionTime, result: decompressedContent } =
    timedExecution(() => decompress(compressedContent, type));

  return {
    type,
    level,
    compressionTime,
    compressedByteLength: compressedContent.byteLength,
    decompressionTime,
    decompressedByteLength: decompressedContent.byteLength,
  };
}

/**
 *
 * @param {Buffer} content
 * @param {"gzip"| "br"} type
 * @param {number} level
 * @returns {Buffer}
 */
function compress(content, type, level) {
  if (type === "gzip") {
    return gzipSync(content, { level });
  } else if (type === "br") {
    return brotliCompressSync(content, {
      params: {
        [constants.BROTLI_PARAM_QUALITY]: level,
      },
    });
  }
}

/**
 *
 * @param {Buffer} content
 * @param {"gzip" | "br"} type
 * @returns {Buffer}
 */
function decompress(content, type) {
  if (type === "gzip") {
    return gunzipSync(content);
  } else if (type === "br") {
    return brotliDecompressSync(content);
  }
}

/**
 *
 * @param {() => Buffer} taskSync
 * @returns {{time: number, result: Buffer}}
 */
function timedExecution(taskSync) {
  const start = performance.now();
  const result = taskSync();
  const end = performance.now();
  return {
    time: end - start,
    result,
  };
}
